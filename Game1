using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.Linq;
/// <summary>
/// ////////////////////// S 86 s 
/// </summary>
namespace Spaceshooter
{
    
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics; // För grafik
        SpriteBatch spriteBatch;//rita bilder

        

        public Game1 ()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            graphics.IsFullScreen = false;
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {

            GameElements.currentState = GameElements.State.Menu;
            GameElements.Initialize();
            base.Initialize();
           
        }


        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);
            GameElements.LoadContent(Content, Window);
        }
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param
        /// </param>
        protected override void Update(GameTime gameTime)
        {
        //    // st'nger av spelet om man trycker på back-knappen på gamepaden
        //    if(GamePad.GetState(PlayerIndex.One). Buttons.Back ==
        //       ButtonState.Pressed)
        //        this.Exit();

            switch (GameElements.currentState)
            {
                case GameElements.State.Run: // kör själva spelet
                    GameElements.currentState =
                     GameElements.RunUpdate(Content, Window, gameTime);
                    break;
                case GameElements.State.Highscore: // Highscorelistan
                    GameElements.currentState =
                     GameElements.HighScoreUpdate();
                    break;
                case GameElements.State.Quit: // AVsluta  spelet
                    this.Exit();
                    break;
                default: //menyn
                    GameElements.currentState =
                    GameElements.MenuUpdate(gameTime);
                    break;

            }
            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            //Rensa skärmen 


            GraphicsDevice.Clear(Color.CornflowerBlue);

            spriteBatch.Begin();
            
            switch (GameElements.currentState)
            {
                case GameElements.State.Run: // kör själva spelet
                    
                     GameElements.RunDraw(spriteBatch);
                    break;
                case GameElements.State.Highscore: // Highscoreli
                    GameElements.HighScoreDraw(spriteBatch);
                    break;
                case GameElements.State.Quit: // AVsluta  spelet
                    this.Exit();
                    break;
                default: //menyn
                    GameElements.MenuDraw(spriteBatch);
                    break;
            }
            spriteBatch.End();

       
            // TODO: Add your drawing code here

            base.Draw(gameTime);
        }
    }
}
